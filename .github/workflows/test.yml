name: QA Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run API tests with coverage
      run: |
        cd backend
        npm test -- --coverage --watchAll=false
        
    - name: Upload API test coverage
      uses: actions/upload-artifact@v4
      with:
        name: api-coverage-report
        path: backend/coverage/
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: backend/coverage/lcov.info
        title: API Test Coverage Report

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
        
    - name: Start backend server
      run: |
        cd backend
        npm start &
        echo $! > backend.pid
        # Wait for server to start
        npx wait-on http://localhost:5000/health --timeout 60000
      env:
        NODE_ENV: test
        
    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        echo $! > frontend.pid
        # Wait for frontend to start
        npx wait-on http://localhost:3000 --timeout 60000
      env:
        CI: true
        
    - name: Run Playwright tests
      run: |
        cd frontend
        npx playwright test --reporter=html
      env:
        CI: true
        
    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
        fi
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: frontend/test-results/
        retention-days: 30

  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
        
    - name: Start servers
      run: |
        cd backend && npm start &
        echo $! > backend.pid
        npx wait-on http://localhost:5000/health --timeout 60000
        
        cd frontend && npm start &
        echo $! > frontend.pid
        npx wait-on http://localhost:3000 --timeout 60000
      env:
        NODE_ENV: test
        CI: true
        
    - name: Run visual tests
      run: |
        cd frontend
        npx playwright test tests/visual.spec.js --reporter=html
      env:
        CI: true
        
    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
        if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi
        
    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-test-results
        path: frontend/test-results/
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, visual-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create test summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.api-tests.result }}" == "success" ]; then
          echo "✅ **API Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **API Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.ui-tests.result }}" == "success" ]; then
          echo "✅ **UI Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **UI Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.visual-tests.result }}" == "success" ]; then
          echo "✅ **Visual Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Visual Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- API Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- Playwright HTML Report" >> $GITHUB_STEP_SUMMARY
        echo "- Visual Test Screenshots" >> $GITHUB_STEP_SUMMARY
        echo "- Test Results & Videos" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "::warning::One or more test suites failed. Please check the artifacts for detailed results." 